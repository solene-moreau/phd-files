/*************************************
LAK (FIX v1)

[1] T. van Deursen and S. Radomirović,
‘Attacks on RFID Protocols’,
Cryptology ePrint Archive, vol. 2008, no. 310, pp. 1–56, Aug. 2009.

DESCRIPTION OF THE PROTOCOL
[init.]   kT <-- k, insert k in DB
[session] R --> T : nR
          T --> R : <nT,h(<xnR,nT,kT>)>
          R --> T : h(<h(<nR,xnT,kR>),kR,nR>)   if there exists kR in DB
                                                    such that snd(x) = h(<nR,fst(x),kR>)
          T --> R : ok                          if x = h(<h(<xnR,nT,kT>),kT,xnR>)
          T --> R : error                       otherwise

PROOFS
- sanity checks
  * readerComplete      => true (automatic mode)
  * tagComplete         => true (automatic mode)
- helpful lemmas
  * secrecyDB1          => true (automatic mode)
  * secrecyDB2          => true (automatic mode)
  * secrecyIdentityTag  => true (automatic mode)
- well-authentication
  * WA_Tag              => true (automatic mode)
  * WA_Reader           => true (automatic mode)
- no desynchronisation
  * ND_Tag              => true (automatic mode)
  * ND_Reader           => true (automatic mode)
*************************************/

theory LAK_fix_v1_WA_ND
begin

functions: h/3, OK/0, ERROR/0

/*************************************
PROTOCOL
*************************************/

rule InitReader:
  [ Fr(~sidR) ]
  --[ NewReaderSession(~sidR) ]->
  [ Reader(~sidR) ]

rule InitTagId:
  [ Fr(~k) ]
  --[ NewTagState(~k), InsertDB(~k) ]->
  [ !DB(~k), !TagSession(~k) ]

rule InitTagSession:
  [ !TagSession(~kT), Fr(~sidT) ]
  --[ NewTagSession(~sidT,~kT) ]->
  [ Tag(~sidT,~kT) ]

/* READER */

rule R_out1:
  let m1 = ~nR in
  [ Reader(~sidR), Fr(~nR)]
  --[ OutR1(~sidR,~nR) ]->
  [ Reader1(~sidR,~nR), Out(m1) ]

rule R_in1:
  [ Reader1(~sidR,m1), In(x2) ]
  --[ InR1(~sidR,m1,x2) ]->
  [ Reader2(~sidR,m1,x2) ]

rule R_test:
  let x2 = <xnT,h(m1,xnT,kR)> in
  [ !DB(kR), Reader2(~sidR,m1,x2) ]
  --[ LookupDB(kR), TestR(~sidR) ]->
  [ Reader3(~sidR,m1,x2,xnT,kR) ]

rule R_out2:
  let m3 = h(h(m1,xnT,kR),kR,m1) in
  [ Reader3(~sidR,m1,x2,xnT,kR) ]
  --[ OutR2(~sidR,m1,x2,m3), CompleteR(~sidR) ]->
  [ Out(m3) ]

/* TAG */

rule T_in1:
  [ Tag(~sidT,kT), In(x1) ]
  --[ PlayT(~sidT,kT), InT1(~sidT,kT,x1) ]->
  [ Tag1(~sidT,kT,x1) ]

rule T_out1:
  let m2 = <~nT,h(x1,~nT,kT)> in
  [ Tag1(~sidT,kT,x1), Fr(~nT) ]
  --[ PlayT(~sidT,kT), OutT1(~sidT,kT,~nT,x1,m2) ]->
  [ Tag2(~sidT,kT,~nT,x1,m2), Out(m2) ]

rule T_in2:
  [ Tag2(~sidT,kT,~nT,x1,m2), In(x3) ]
  --[ PlayT(~sidT,kT), InT2(~sidT,kT,~nT,x1,m2,x3) ]->
  [ Tag3(~sidT,kT,~nT,x1,m2,x3) ]

rule T_test_then:
  let x3 = h(h(x1,~nT,kT),kT,x1) in
  [ Tag3(~sidT,kT,~nT,x1,m2,x3) ]
  --[ PlayT(~sidT,kT), TestT(~sidT), CompleteT(~sidT) ]->
  [ Out(OK) ]

rule T_test_else:
  [ Tag3(~sidT,kT,~nT,x1,m2,x3) ]
  --[ PlayT(~sidT,kT), ElseT(~sidT), NotEqual(x3,h(h(x1,~nT,kT),kT,x1)) ]->
  [ Out(ERROR) ]

/*************************************
RESTRICTIONS
*************************************/

restriction notEqual:
  "All x y #i. NotEqual(x,y)@i ==> not(x=y)"

// no interleaving sessions for a given tag
restriction seqSessionTag:
  "not (Ex sidT1 sidT2 kT #i1 #i2 #i3.
    PlayT(sidT1,kT) @ i1 &
    PlayT(sidT2,kT) @ i2 &
    PlayT(sidT1,kT) @ i3 &
    i1 < i2 & i2 < i3 &
    not(sidT1=sidT2)
  )"

/*************************************
SANITY CHECKS
*************************************/

lemma readerComplete:
  exists-trace
    "Ex sidR #i. CompleteR(sidR)@i"

lemma tagComplete:
  exists-trace
    "Ex sidT #i. CompleteT(sidT)@i"

/*************************************
HELPFUL LEMMAS
*************************************/

lemma secrecyDB1 [reuse] :
  "not(Ex k #i1 #i2. (InsertDB(k)@i1 & KU(k)@i2))"

lemma secrecyDB2 [reuse, use_induction] :
  "not(Ex k #i1 #i2. (LookupDB(k)@i1 & KU(k)@i2))"

lemma secrecyIdentityTag [reuse] :
  "not(Ex sidT k #i1 #i2. (NewTagSession(sidT,k)@i1 & KU(k)@i2))"

/*************************************
WELL-AUTHENTICATION
*************************************/

lemma WA_Tag [use_induction]:
  "All sidT #i7.
    TestT(sidT)@i7 ==>
      ( Ex kT nT sidR m1 m2 m3 #i1 #i2 #i3 #i4 #i5 #i6.
        (
          InT2(sidT,kT,nT,m1,m2,m3)@i6 &
          OutR2(sidR,m1,m2,m3)@i5 &
          InR1(sidR,m1,m2)@i4 &
          OutT1(sidT,kT,nT,m1,m2)@i3 &
          InT1(sidT,kT,m1)@i2 &
          OutR1(sidR,m1)@i1 &
          i1<i2 & i2<i3 & i3<i4 & i4<i5 & i5<i6 & i6<i7
        )
      )
  "

lemma WA_Reader [use_induction]:
  "All sidR #i5.
    TestR(sidR)@i5 ==>
      ( Ex sidT kT nT m1 m2 #i1 #i2 #i3 #i4.
        (
          InR1(sidR,m1,m2)@i4 &
          OutT1(sidT,kT,nT,m1,m2)@i3 &
          InT1(sidT,kT,m1)@i2 &
          OutR1(sidR,m1)@i1 &
          i1<i2 & i2<i3 & i3<i4 & i4<i5
        )
      )
  "

/*************************************
NO DESYNCHRONISATION
*************************************/

lemma ND_Tag:
  "All sidT kT nT sidR m1 m2 m3 #i1 #i2 #i3 #i4 #i5 #i6.
    ( InT2(sidT,kT,nT,m1,m2,m3)@i6 &
      OutR2(sidR,m1,m2,m3)@i5 &
      InR1(sidR,m1,m2)@i4 &
      OutT1(sidT,kT,nT,m1,m2)@i3 &
      InT1(sidT,kT,m1)@i2 &
      OutR1(sidR,m1)@i1 &
      i1<i2 & i2<i3 & i3<i4 & i4<i5 & i5<i6
    ) ==> (
      m3 = h(h(m1,nT,kT),kT,m1)
    )
  "

lemma ND_Reader:
  "All sidT kT nT sidR m1 m2 #i1 #i2 #i3 #i4.
    ( InR1(sidR,m1,m2)@i4 &
      OutT1(sidT,kT,nT,m1,m2)@i3 &
      InT1(sidT,kT,m1)@i2 &
      OutR1(sidR,m1)@i1 &
      i1<i2 & i2<i3 & i3<i4
    ) ==> (
      Ex kR xnT #i0. m2 = <xnT,h(m1,xnT,kT)> & InsertDB(kR)@i0 & i0<i4
    )
  "

end
