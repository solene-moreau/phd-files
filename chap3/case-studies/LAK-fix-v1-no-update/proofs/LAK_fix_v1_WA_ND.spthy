theory LAK_fix_v1_WA_ND begin

// Function signature and definition of the equational theory E

functions: ERROR/0, OK/0, fst/1, h/3, pair/2, snd/1
equations: fst(<x.1, x.2>) = x.1, snd(<x.1, x.2>) = x.2



rule (modulo E) InitReader:
   [ Fr( ~sidR ) ]
  --[ NewReaderSession( ~sidR ) ]->
   [ Reader( ~sidR ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) InitTagId:
   [ Fr( ~k ) ]
  --[ NewTagState( ~k ), InsertDB( ~k ) ]->
   [ !DB( ~k ), !TagSession( ~k ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) InitTagSession:
   [ !TagSession( ~kT ), Fr( ~sidT ) ]
  --[ NewTagSession( ~sidT, ~kT ) ]->
   [ Tag( ~sidT, ~kT ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) R_out1:
   [ Reader( ~sidR ), Fr( ~nR ) ]
  --[ OutR1( ~sidR, ~nR ) ]->
   [ Reader1( ~sidR, ~nR ), Out( ~nR ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) R_in1:
   [ Reader1( ~sidR, m1 ), In( x2 ) ]
  --[ InR1( ~sidR, m1, x2 ) ]->
   [ Reader2( ~sidR, m1, x2 ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) R_test:
   [ !DB( kR ), Reader2( ~sidR, m1, <xnT, h(m1, xnT, kR)> ) ]
  --[ LookupDB( kR ), TestR( ~sidR ) ]->
   [ Reader3( ~sidR, m1, <xnT, h(m1, xnT, kR)>, xnT, kR ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) R_out2:
   [ Reader3( ~sidR, m1, x2, xnT, kR ) ]
  --[
  OutR2( ~sidR, m1, x2, h(h(m1, xnT, kR), kR, m1) ),
  CompleteR( ~sidR )
  ]->
   [ Out( h(h(m1, xnT, kR), kR, m1) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) T_in1:
   [ Tag( ~sidT, kT ), In( x1 ) ]
  --[ PlayT( ~sidT, kT ), InT1( ~sidT, kT, x1 ) ]->
   [ Tag1( ~sidT, kT, x1 ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) T_out1:
   [ Tag1( ~sidT, kT, x1 ), Fr( ~nT ) ]
  --[
  PlayT( ~sidT, kT ),
  OutT1( ~sidT, kT, ~nT, x1, <~nT, h(x1, ~nT, kT)> )
  ]->
   [
   Tag2( ~sidT, kT, ~nT, x1, <~nT, h(x1, ~nT, kT)> ),
   Out( <~nT, h(x1, ~nT, kT)> )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) T_in2:
   [ Tag2( ~sidT, kT, ~nT, x1, m2 ), In( x3 ) ]
  --[ PlayT( ~sidT, kT ), InT2( ~sidT, kT, ~nT, x1, m2, x3 ) ]->
   [ Tag3( ~sidT, kT, ~nT, x1, m2, x3 ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) T_test_then:
   [ Tag3( ~sidT, kT, ~nT, x1, m2, h(h(x1, ~nT, kT), kT, x1) ) ]
  --[ PlayT( ~sidT, kT ), TestT( ~sidT ), CompleteT( ~sidT ) ]->
   [ Out( OK ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) T_test_else:
   [ Tag3( ~sidT, kT, ~nT, x1, m2, x3 ) ]
  --[
  PlayT( ~sidT, kT ), ElseT( ~sidT ),
  NotEqual( x3, h(h(x1, ~nT, kT), kT, x1) )
  ]->
   [ Out( ERROR ) ]

  /* has exactly the trivial AC variant */

restriction notEqual:
  "∀ x y #i. (NotEqual( x, y ) @ #i) ⇒ (¬(x = y))"
  // safety formula

restriction seqSessionTag:
  "¬(∃ sidT1 sidT2 kT #i1 #i2 #i3.
      (((((PlayT( sidT1, kT ) @ #i1) ∧ (PlayT( sidT2, kT ) @ #i2)) ∧
         (PlayT( sidT1, kT ) @ #i3)) ∧
        (#i1 < #i2)) ∧
       (#i2 < #i3)) ∧
      (¬(sidT1 = sidT2)))"
  // safety formula

lemma readerComplete:
  exists-trace "∃ sidR #i. CompleteR( sidR ) @ #i"
/*
guarded formula characterizing all satisfying traces:
"∃ sidR #i. (CompleteR( sidR ) @ #i)"
*/
simplify
solve( Reader3( ~sidR, m1, x2, xnT, kR ) ▶₀ #i )
  case R_test
  solve( !KU( h(~nR, xnT, ~k) ) @ #vk.2 )
    case T_out1
    solve( !KU( ~nR ) @ #vk.3 )
      case R_out1
      solve( !KU( ~nT ) @ #vk.3 )
        case T_out1
        SOLVED // trace found
      qed
    qed
  qed
qed

lemma tagComplete:
  exists-trace "∃ sidT #i. CompleteT( sidT ) @ #i"
/*
guarded formula characterizing all satisfying traces:
"∃ sidT #i. (CompleteT( sidT ) @ #i)"
*/
simplify
solve( Tag3( ~sidT, kT, ~nT, x1, m2, h(h(x1, ~nT, kT), kT, x1)
       ) ▶₀ #i )
  case T_in2
  solve( !KU( h(h(x1, ~nT, ~kT), ~kT, x1) ) @ #vk )
    case R_out2
    solve( !KU( ~nT ) @ #vk.3 )
      case T_out1
      solve( !KU( ~nR ) @ #vk.2 )
        case R_out1
        solve( !KU( h(~nR, ~nT, ~kT) ) @ #vk.4 )
          case T_out1
          SOLVED // trace found
        qed
      qed
    qed
  qed
qed

lemma secrecyDB1 [reuse]:
  all-traces
  "¬(∃ k #i1 #i2. (InsertDB( k ) @ #i1) ∧ (!KU( k ) @ #i2))"
/*
guarded formula characterizing all counter-examples:
"∃ k #i1 #i2. (InsertDB( k ) @ #i1) ∧ (!KU( k ) @ #i2)"
*/
simplify
by solve( !KU( ~k ) @ #i2 )

lemma secrecyDB2 [reuse, use_induction]:
  all-traces
  "¬(∃ k #i1 #i2. (LookupDB( k ) @ #i1) ∧ (!KU( k ) @ #i2))"
/*
guarded formula characterizing all counter-examples:
"∃ k #i1 #i2. (LookupDB( k ) @ #i1) ∧ (!KU( k ) @ #i2)"
*/
induction
  case empty_trace
  by contradiction /* from formulas */
next
  case non_empty_trace
  simplify
  solve( (last(#i2))  ∥ (last(#i1)) )
    case case_1
    solve( !DB( k ) ▶₀ #i1 )
      case InitTagId
      by contradiction /* from formulas */
    qed
  next
    case case_2
    solve( !DB( k ) ▶₀ #i1 )
      case InitTagId
      by contradiction /* from formulas */
    qed
  qed
qed

lemma secrecyIdentityTag [reuse]:
  all-traces
  "¬(∃ sidT k #i1 #i2.
      (NewTagSession( sidT, k ) @ #i1) ∧ (!KU( k ) @ #i2))"
/*
guarded formula characterizing all counter-examples:
"∃ sidT k #i1 #i2.
  (NewTagSession( sidT, k ) @ #i1) ∧ (!KU( k ) @ #i2)"
*/
simplify
solve( !TagSession( ~kT ) ▶₀ #i1 )
  case InitTagId
  by contradiction /* from formulas */
qed

lemma WA_Tag [use_induction]:
  all-traces
  "∀ sidT #i7.
    (TestT( sidT ) @ #i7) ⇒
    (∃ kT nT sidR m1 m2 m3 #i1 #i2 #i3 #i4 #i5 #i6.
      (((((((((((InT2( sidT, kT, nT, m1, m2, m3 ) @ #i6) ∧
                (OutR2( sidR, m1, m2, m3 ) @ #i5)) ∧
               (InR1( sidR, m1, m2 ) @ #i4)) ∧
              (OutT1( sidT, kT, nT, m1, m2 ) @ #i3)) ∧
             (InT1( sidT, kT, m1 ) @ #i2)) ∧
            (OutR1( sidR, m1 ) @ #i1)) ∧
           (#i1 < #i2)) ∧
          (#i2 < #i3)) ∧
         (#i3 < #i4)) ∧
        (#i4 < #i5)) ∧
       (#i5 < #i6)) ∧
      (#i6 < #i7))"
/*
guarded formula characterizing all counter-examples:
"∃ sidT #i7.
  (TestT( sidT ) @ #i7)
 ∧
  ∀ kT nT sidR m1 m2 m3 #i1 #i2 #i3 #i4 #i5 #i6.
   (InT2( sidT, kT, nT, m1, m2, m3 ) @ #i6) ∧
   (OutR2( sidR, m1, m2, m3 ) @ #i5) ∧
   (InR1( sidR, m1, m2 ) @ #i4) ∧
   (OutT1( sidT, kT, nT, m1, m2 ) @ #i3) ∧
   (InT1( sidT, kT, m1 ) @ #i2) ∧
   (OutR1( sidR, m1 ) @ #i1)
  ⇒
   ((¬(#i1 < #i2)) ∨
    (¬(#i2 < #i3)) ∨
    (¬(#i3 < #i4)) ∨
    (¬(#i4 < #i5)) ∨
    (¬(#i5 < #i6)) ∨
    (¬(#i6 < #i7)))"
*/
induction
  case empty_trace
  by contradiction /* from formulas */
next
  case non_empty_trace
  simplify
  solve( (last(#i7))  ∥
         (∃ kT nT sidR m1 m2 m3 #i1 #i2 #i3 #i4 #i5 #i6.
           (InT2( ~sidT, kT, nT, m1, m2, m3 ) @ #i6) ∧
           (OutR2( sidR, m1, m2, m3 ) @ #i5) ∧
           (InR1( sidR, m1, m2 ) @ #i4) ∧
           (OutT1( ~sidT, kT, nT, m1, m2 ) @ #i3) ∧
           (InT1( ~sidT, kT, m1 ) @ #i2) ∧
           (OutR1( sidR, m1 ) @ #i1)
          ∧
           (¬(last(#i6))) ∧
           (¬(last(#i5))) ∧
           (¬(last(#i4))) ∧
           (¬(last(#i3))) ∧
           (¬(last(#i2))) ∧
           (¬(last(#i1))) ∧
           (#i1 < #i2) ∧
           (#i2 < #i3) ∧
           (#i3 < #i4) ∧
           (#i4 < #i5) ∧
           (#i5 < #i6) ∧
           (#i6 < #i7)) )
    case case_1
    solve( Tag3( ~sidT, kT, ~nT, x1, m2, h(h(x1, ~nT, kT), kT, x1)
           ) ▶₀ #i7 )
      case T_in2
      solve( !KU( h(h(x1, ~nT, ~kT), ~kT, x1) ) @ #vk )
        case R_out2
        solve( (¬(#vr.8 < #vr.2))  ∥ (¬(#vr.1 < #vr.7)) )
          case case_1
          solve( !KU( ~nR ) @ #vk.1 )
            case R_out1
            by contradiction /* cyclic */
          qed
        next
          case case_2
          solve( !KU( ~nT ) @ #vk.3 )
            case T_out1
            by contradiction /* cyclic */
          qed
        qed
      next
        case c_h
        by contradiction /* from formulas */
      qed
    qed
  next
    case case_2
    by contradiction /* from formulas */
  qed
qed

lemma WA_Reader [use_induction]:
  all-traces
  "∀ sidR #i5.
    (TestR( sidR ) @ #i5) ⇒
    (∃ sidT kT nT m1 m2 #i1 #i2 #i3 #i4.
      (((((((InR1( sidR, m1, m2 ) @ #i4) ∧
            (OutT1( sidT, kT, nT, m1, m2 ) @ #i3)) ∧
           (InT1( sidT, kT, m1 ) @ #i2)) ∧
          (OutR1( sidR, m1 ) @ #i1)) ∧
         (#i1 < #i2)) ∧
        (#i2 < #i3)) ∧
       (#i3 < #i4)) ∧
      (#i4 < #i5))"
/*
guarded formula characterizing all counter-examples:
"∃ sidR #i5.
  (TestR( sidR ) @ #i5)
 ∧
  ∀ sidT kT nT m1 m2 #i1 #i2 #i3 #i4.
   (InR1( sidR, m1, m2 ) @ #i4) ∧
   (OutT1( sidT, kT, nT, m1, m2 ) @ #i3) ∧
   (InT1( sidT, kT, m1 ) @ #i2) ∧
   (OutR1( sidR, m1 ) @ #i1)
  ⇒
   ((¬(#i1 < #i2)) ∨
    (¬(#i2 < #i3)) ∨
    (¬(#i3 < #i4)) ∨
    (¬(#i4 < #i5)))"
*/
induction
  case empty_trace
  by contradiction /* from formulas */
next
  case non_empty_trace
  simplify
  solve( (last(#i5))  ∥
         (∃ sidT kT nT m1 m2 #i1 #i2 #i3 #i4.
           (InR1( ~sidR, m1, m2 ) @ #i4) ∧
           (OutT1( sidT, kT, nT, m1, m2 ) @ #i3) ∧
           (InT1( sidT, kT, m1 ) @ #i2) ∧
           (OutR1( ~sidR, m1 ) @ #i1)
          ∧
           (¬(last(#i4))) ∧
           (¬(last(#i3))) ∧
           (¬(last(#i2))) ∧
           (¬(last(#i1))) ∧
           (#i1 < #i2) ∧
           (#i2 < #i3) ∧
           (#i3 < #i4) ∧
           (#i4 < #i5)) )
    case case_1
    solve( !DB( kR ) ▶₀ #i5 )
      case InitTagId
      solve( Reader2( ~sidR, m1, <xnT, h(m1, xnT, ~k)> ) ▶₁ #i5 )
        case R_in1
        solve( !KU( h(~nR, xnT, ~k) ) @ #vk.2 )
          case T_out1
          solve( !KU( ~nR ) @ #vk.3 )
            case R_out1
            by contradiction /* cyclic */
          qed
        next
          case c_h
          by contradiction /* from formulas */
        qed
      qed
    qed
  next
    case case_2
    by contradiction /* from formulas */
  qed
qed

lemma ND_Tag:
  all-traces
  "∀ sidT kT nT sidR m1 m2 m3 #i1 #i2 #i3 #i4 #i5 #i6.
    (((((((((((InT2( sidT, kT, nT, m1, m2, m3 ) @ #i6) ∧
              (OutR2( sidR, m1, m2, m3 ) @ #i5)) ∧
             (InR1( sidR, m1, m2 ) @ #i4)) ∧
            (OutT1( sidT, kT, nT, m1, m2 ) @ #i3)) ∧
           (InT1( sidT, kT, m1 ) @ #i2)) ∧
          (OutR1( sidR, m1 ) @ #i1)) ∧
         (#i1 < #i2)) ∧
        (#i2 < #i3)) ∧
       (#i3 < #i4)) ∧
      (#i4 < #i5)) ∧
     (#i5 < #i6)) ⇒
    (m3 = h(h(m1, nT, kT), kT, m1))"
/*
guarded formula characterizing all counter-examples:
"∃ sidT kT nT sidR m1 m2 m3 #i1 #i2 #i3 #i4 #i5 #i6.
  (InT2( sidT, kT, nT, m1, m2, m3 ) @ #i6) ∧
  (OutR2( sidR, m1, m2, m3 ) @ #i5) ∧
  (InR1( sidR, m1, m2 ) @ #i4) ∧
  (OutT1( sidT, kT, nT, m1, m2 ) @ #i3) ∧
  (InT1( sidT, kT, m1 ) @ #i2) ∧
  (OutR1( sidR, m1 ) @ #i1)
 ∧
  (#i1 < #i2) ∧
  (#i2 < #i3) ∧
  (#i3 < #i4) ∧
  (#i4 < #i5) ∧
  (#i5 < #i6) ∧
  (¬(m3 = h(h(m1, nT, kT), kT, m1)))"
*/
simplify
solve( Reader( ~sidR ) ▶₀ #i1 )
  case InitReader
  solve( Tag( ~sidT, kT ) ▶₀ #i2 )
    case InitTagSession
    solve( Tag1( ~sidT, ~kT, ~nR ) ▶₀ #i3 )
      case T_in1
      solve( Reader1( ~sidR, ~nR ) ▶₀ #i4 )
        case R_out1
        solve( Reader3( ~sidR, ~nR, <~nT, h(~nR, ~nT, ~kT)>, xnT, kR
               ) ▶₀ #i5 )
          case R_test
          by contradiction /* from formulas */
        qed
      qed
    qed
  qed
qed

lemma ND_Reader:
  all-traces
  "∀ sidT kT nT sidR m1 m2 #i1 #i2 #i3 #i4.
    (((((((InR1( sidR, m1, m2 ) @ #i4) ∧
          (OutT1( sidT, kT, nT, m1, m2 ) @ #i3)) ∧
         (InT1( sidT, kT, m1 ) @ #i2)) ∧
        (OutR1( sidR, m1 ) @ #i1)) ∧
       (#i1 < #i2)) ∧
      (#i2 < #i3)) ∧
     (#i3 < #i4)) ⇒
    (∃ kR xnT #i0.
      ((m2 = <xnT, h(m1, xnT, kT)>) ∧ (InsertDB( kR ) @ #i0)) ∧
      (#i0 < #i4))"
/*
guarded formula characterizing all counter-examples:
"∃ sidT kT nT sidR m1 m2 #i1 #i2 #i3 #i4.
  (InR1( sidR, m1, m2 ) @ #i4) ∧
  (OutT1( sidT, kT, nT, m1, m2 ) @ #i3) ∧
  (InT1( sidT, kT, m1 ) @ #i2) ∧
  (OutR1( sidR, m1 ) @ #i1)
 ∧
  (#i1 < #i2) ∧
  (#i2 < #i3) ∧
  (#i3 < #i4) ∧
  (∀ kR xnT #i0.
    (m2 = <xnT, h(m1, xnT, kT)>) ∧ (InsertDB( kR ) @ #i0)
   ⇒
    ¬(#i0 < #i4))"
*/
simplify
solve( Reader( ~sidR ) ▶₀ #i1 )
  case InitReader
  solve( Tag( ~sidT, kT ) ▶₀ #i2 )
    case InitTagSession
    by contradiction /* from formulas */
  qed
qed

/* All well-formedness checks were successful. */

end