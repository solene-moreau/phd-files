theory LAK_WA_ND begin

// Function signature and definition of the equational theory E

functions: ERROR/0, OK/0, fst/1, h/3, hkey/1, pair/2, snd/1
equations: fst(<x.1, x.2>) = x.1, snd(<x.1, x.2>) = x.2



rule (modulo E) InitReader:
   [ Fr( ~sidR ) ]
  --[ NewReaderSession( ~sidR ) ]->
   [ Reader( ~sidR ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) InitTagId:
   [ Fr( ~k ) ]
  --[
  NewTagState( ~k, hkey(~k) ), InsertDB( ~k, hkey(~k) ), Fresh( ~k ),
  StateDB( hkey(~k) )
  ]->
   [ DB( ~k, hkey(~k) ), !TagSession( ~k, hkey(~k) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) InitTagSession:
   [ !TagSession( idT, kT ), Fr( ~sidT ) ]
  --[ NewTagSession( ~sidT, idT, kT ), StateT( kT ) ]->
   [ Tag( ~sidT, idT, kT ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) R_out1:
   [ Reader( ~sidR ), Fr( ~nR ) ]
  --[ OutR1( ~sidR, ~nR ) ]->
   [ Reader1( ~sidR, ~nR ), Out( ~nR ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) R_in1:
   [ Reader1( ~sidR, m1 ), In( x2 ) ]
  --[ InR1( ~sidR, m1, x2 ) ]->
   [ Reader2( ~sidR, m1, x2 ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) R_test1:
   [ DB( kR0, kR ), Reader2( ~sidR, m1, <xnT, h(m1, xnT, kR)> ) ]
  --[
  InsertDB( kR, hkey(kR) ), RemoveDB( kR0, kR ), StateDB( hkey(kR) ),
  TestR1( ~sidR )
  ]->
   [
   DB( kR, hkey(kR) ),
   Reader3( ~sidR, m1, <xnT, h(m1, xnT, kR)>, xnT, kR )
   ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) R_test1_resync:
   [ DB( kR0, kR ), Reader2( ~sidR, m1, <xnT, h(m1, xnT, kR0)> ) ]
  --[ NoUpdateDB( kR0, kR ), StateDB( hkey(kR) ), TestR( ~sidR ) ]->
   [
   DB( kR0, kR ),
   Reader3( ~sidR, m1, <xnT, h(m1, xnT, kR0)>, xnT, kR0 )
   ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) R_out2:
   [ Reader3( ~sidR, m1, x2, xnT, xkT ) ]
  --[
  OutR2( ~sidR, m1, x2, h(h(m1, xnT, xkT), xkT, m1) ),
  CompleteR( ~sidR )
  ]->
   [ Out( h(h(m1, xnT, xkT), xkT, m1) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) T_in1:
   [ Tag( ~sidT, idT, kT ), In( x1 ) ]
  --[ PlayT( ~sidT, idT, kT ), InT1( ~sidT, kT, x1 ) ]->
   [ Tag1( ~sidT, idT, kT, x1 ) ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) T_out1:
   [ Tag1( ~sidT, idT, kT, x1 ), Fr( ~nT ) ]
  --[
  PlayT( ~sidT, idT, kT ),
  OutT1( ~sidT, kT, ~nT, x1, <~nT, h(x1, ~nT, kT)> )
  ]->
   [
   Tag2( ~sidT, idT, kT, ~nT, x1, <~nT, h(x1, ~nT, kT)> ),
   Out( <~nT, h(x1, ~nT, kT)> )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) T_in2:
   [ Tag2( ~sidT, idT, kT, ~nT, x1, m2 ), In( x3 ) ]
  --[ PlayT( ~sidT, idT, kT ), InT2( ~sidT, kT, ~nT, x1, m2, x3 ) ]->
   [ Tag3( ~sidT, idT, kT, ~nT, x1, m2, x3 ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) T_test_then:
   [ Tag3( ~sidT, idT, kT, ~nT, x1, m2, h(h(x1, ~nT, kT), kT, x1) ) ]
  --[
  PlayT( ~sidT, idT, kT ), TestT( ~sidT ), CompleteT( ~sidT ),
  NewTagState( idT, hkey(kT) ), StateT( hkey(kT) )
  ]->
   [ !TagSession( idT, hkey(kT) ), Out( OK ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) T_test_else:
   [ Tag3( ~sidT, idT, kT, ~nT, x1, m2, x3 ) ]
  --[
  PlayT( ~sidT, idT, kT ), NotEqual( x3, h(h(x1, ~nT, kT), kT, x1) )
  ]->
   [ Out( ERROR ) ]

  /* has exactly the trivial AC variant */

restriction seqSessionTag:
  "¬(∃ sidT1 sidT2 idT kT1 kT2 kT3 #i1 #i2 #i3.
      (((((PlayT( sidT1, idT, kT1 ) @ #i1) ∧
          (PlayT( sidT2, idT, kT2 ) @ #i2)) ∧
         (PlayT( sidT1, idT, kT3 ) @ #i3)) ∧
        (#i1 < #i2)) ∧
       (#i2 < #i3)) ∧
      (¬(sidT1 = sidT2)))"
  // safety formula

restriction updateTag:
  "¬(∃ sidT idT kT #i1 #i2.
      ((NewTagState( idT, hkey(kT) ) @ #i1) ∧
       (PlayT( sidT, idT, kT ) @ #i2)) ∧
      (#i1 < #i2))"
  // safety formula

lemma readerComplete:
  exists-trace "∃ sidR #i. CompleteR( sidR ) @ #i"
/*
guarded formula characterizing all satisfying traces:
"∃ sidR #i. (CompleteR( sidR ) @ #i)"
*/
simplify
solve( Reader3( ~sidR, m1, x2, xnT, xkT ) ▶₀ #i )
  case R_test1
  solve( !KU( h(~nR, xnT, xkT) ) @ #vk.2 )
    case T_out1
    solve( DB( kR0, xkT ) ▶₀ #vr )
      case InitTagId
      solve( Tag( ~sidT, idT, hkey(~k) ) ▶₀ #vr.6 )
        case InitTagSession_case_1
        solve( !KU( ~nR ) @ #vk.3 )
          case R_out1
          solve( !KU( ~nT ) @ #vk.3 )
            case T_out1
            SOLVED // trace found
          qed
        qed
      qed
    qed
  qed
qed

lemma tagComplete:
  exists-trace "∃ sidT #i. CompleteT( sidT ) @ #i"
/*
guarded formula characterizing all satisfying traces:
"∃ sidT #i. (CompleteT( sidT ) @ #i)"
*/
simplify
solve( Tag3( ~sidT, idT, kT, ~nT, x1, m2, h(h(x1, ~nT, kT), kT, x1)
       ) ▶₀ #i )
  case T_in2
  solve( !KU( h(h(x1, ~nT, kT), kT, x1) ) @ #vk )
    case R_out2_case_1
    solve( Tag( ~sidT, idT, kT ) ▶₀ #vr.2 )
      case InitTagSession_case_1
      solve( DB( kR0, hkey(~k) ) ▶₀ #vr.4 )
        case InitTagId
        solve( !KU( ~nT ) @ #vk.3 )
          case T_out1
          solve( !KU( ~nR ) @ #vk.2 )
            case R_out1
            solve( !KU( h(~nR, ~nT, hkey(~k)) ) @ #vk.4 )
              case T_out1
              SOLVED // trace found
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma ND_Tag:
  all-traces
  "∀ sidT kT nT sidR m1 m2 m3 #i1 #i2 #i3 #i4 #i5 #i6.
    (((((((((((InT2( sidT, kT, nT, m1, m2, m3 ) @ #i6) ∧
              (OutR2( sidR, m1, m2, m3 ) @ #i5)) ∧
             (InR1( sidR, m1, m2 ) @ #i4)) ∧
            (OutT1( sidT, kT, nT, m1, m2 ) @ #i3)) ∧
           (InT1( sidT, kT, m1 ) @ #i2)) ∧
          (OutR1( sidR, m1 ) @ #i1)) ∧
         (#i1 < #i2)) ∧
        (#i2 < #i3)) ∧
       (#i3 < #i4)) ∧
      (#i4 < #i5)) ∧
     (#i5 < #i6)) ⇒
    (m3 = h(h(m1, nT, kT), kT, m1))"
/*
guarded formula characterizing all counter-examples:
"∃ sidT kT nT sidR m1 m2 m3 #i1 #i2 #i3 #i4 #i5 #i6.
  (InT2( sidT, kT, nT, m1, m2, m3 ) @ #i6) ∧
  (OutR2( sidR, m1, m2, m3 ) @ #i5) ∧
  (InR1( sidR, m1, m2 ) @ #i4) ∧
  (OutT1( sidT, kT, nT, m1, m2 ) @ #i3) ∧
  (InT1( sidT, kT, m1 ) @ #i2) ∧
  (OutR1( sidR, m1 ) @ #i1)
 ∧
  (#i1 < #i2) ∧
  (#i2 < #i3) ∧
  (#i3 < #i4) ∧
  (#i4 < #i5) ∧
  (#i5 < #i6) ∧
  (¬(m3 = h(h(m1, nT, kT), kT, m1)))"
*/
simplify
solve( Reader( ~sidR ) ▶₀ #i1 )
  case InitReader
  solve( Tag1( ~sidT, idT.1, kT, ~nR ) ▶₀ #i3 )
    case T_in1
    solve( Reader1( ~sidR, ~nR ) ▶₀ #i4 )
      case R_out1
      solve( Reader3( ~sidR, ~nR, <~nT, h(~nR, ~nT, kT)>, xnT, xkT
             ) ▶₀ #i5 )
        case R_test1
        by contradiction /* from formulas */
      next
        case R_test1_resync
        by contradiction /* from formulas */
      qed
    qed
  qed
qed

lemma ND_Reader:
  all-traces
  "∀ sidT kT nT sidR m1 m2 #i1 #i2 #i3 #i4.
    (((((((InR1( sidR, m1, m2 ) @ #i4) ∧
          (OutT1( sidT, kT, nT, m1, m2 ) @ #i3)) ∧
         (InT1( sidT, kT, m1 ) @ #i2)) ∧
        (OutR1( sidR, m1 ) @ #i1)) ∧
       (#i1 < #i2)) ∧
      (#i2 < #i3)) ∧
     (#i3 < #i4)) ⇒
    (((∃ #i5. (TestR( sidR ) @ #i5) ∧ (#i4 < #i5)) ∨
      (∃ xnT kR0 kR #i0.
        (((m2 = <xnT, h(m1, xnT, kR)>) ∧ (InsertDB( kR0, kR ) @ #i0)) ∧
         (#i0 < #i4)) ∧
        (¬(∃ #i6. (RemoveDB( kR0, kR ) @ #i6) ∧ (#i0 < #i6))))) ∨
     (∃ xnT kR0 kR #i0.
       (((m2 = <xnT, h(m1, xnT, kR0)>) ∧ (InsertDB( kR0, kR ) @ #i0)) ∧
        (#i0 < #i4)) ∧
       (¬(∃ #i6. (RemoveDB( kR0, kR ) @ #i6) ∧ (#i0 < #i6)))))"
/*
guarded formula characterizing all counter-examples:
"∃ sidT kT nT sidR m1 m2 #i1 #i2 #i3 #i4.
  (InR1( sidR, m1, m2 ) @ #i4) ∧
  (OutT1( sidT, kT, nT, m1, m2 ) @ #i3) ∧
  (InT1( sidT, kT, m1 ) @ #i2) ∧
  (OutR1( sidR, m1 ) @ #i1)
 ∧
  (#i1 < #i2) ∧
  (#i2 < #i3) ∧
  (#i3 < #i4) ∧
  (∀ #i5. (TestR( sidR ) @ #i5) ⇒ ¬(#i4 < #i5)) ∧
  (∀ xnT kR0 kR #i0.
    (m2 = <xnT, h(m1, xnT, kR)>) ∧ (InsertDB( kR0, kR ) @ #i0)
   ⇒
    ((¬(#i0 < #i4)) ∨
     (∃ #i6. (RemoveDB( kR0, kR ) @ #i6) ∧ #i0 < #i6))) ∧
  (∀ xnT kR0 kR #i0.
    (m2 = <xnT, h(m1, xnT, kR0)>) ∧ (InsertDB( kR0, kR ) @ #i0)
   ⇒
    ((¬(#i0 < #i4)) ∨
     (∃ #i6. (RemoveDB( kR0, kR ) @ #i6) ∧ #i0 < #i6)))"
*/
simplify
solve( Reader( ~sidR ) ▶₀ #i1 )
  case InitReader
  solve( Tag1( ~sidT, idT.1, kT, ~nR ) ▶₀ #i3 )
    case T_in1
    solve( Reader1( ~sidR, ~nR ) ▶₀ #i4 )
      case R_out1
      solve( Tag( ~sidT, idT, kT ) ▶₀ #i2 )
        case InitTagSession_case_1
        solve( (¬(#i6 < #i4))  ∥
               (∃ #i6.1.
                 (RemoveDB( hkey(~k), hkey(hkey(~k)) ) @ #i6.1) ∧ #i6 < #i6.1) )
          case case_1
          solve( Reader2( ~sidR.1, m1, <xnT, h(m1, xnT, hkey(~k))> ) ▶₁ #i6 )
            case R_in1
            solve( !KU( h(~nR.1, xnT, hkey(~k)) ) @ #vk.6 )
              case T_out1
              solve( Tag( ~sidT, idT, hkey(~k) ) ▶₀ #vr.1 )
                case InitTagSession
                solve( (¬(#i6.1 < #i4))  ∥
                       (∃ #i6.2.
                         (RemoveDB( hkey(~k), hkey(hkey(~k)) ) @ #i6.2) ∧ #i6.1 < #i6.2) )
                  case case_1
                  solve( Reader2( ~sidR.2, m1, <xnT, h(m1, xnT, hkey(~k))>
                         ) ▶₁ #i6.1 )
                    case R_in1
                    solve( !KU( h(~nR.2, xnT, hkey(~k)) ) @ #vk.10 )
                      case T_out1
                      solve( DB( ~k, hkey(~k) ) ▶₀ #i6 )
                        case InitTagId
                        solve( Tag( ~sidT.1, idT, hkey(~k) ) ▶₀ #vr.8 )
                          case InitTagSession_case_1
                          solve( (¬(#i2 < #vr.6))  ∥ (¬(#vr.6 < #i2))  ∥ (~sidT = ~sidT.1) )
                            case case_1
                            solve( DB( ~k, hkey(~k) ) ▶₀ #i6.1 )
                              case InitTagId
                              solve( !KU( ~nR ) @ #vk.2 )
                                case R_out1
                                solve( !KU( ~nT ) @ #vk.4 )
                                  case T_out1
                                  solve( !KU( ~nR.1 ) @ #vk.7 )
                                    case R_out1
                                    solve( !KU( ~nT.1 ) @ #vk.7 )
                                      case T_out1
                                      solve( !KU( h(~nR, ~nT, hkey(~k)) ) @ #vk.7 )
                                        case T_out1
                                        SOLVED // trace found
                                      next
                                        case c_h
                                        by sorry
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case R_test1
                              by sorry
                            next
                              case R_test1_resync
                              by sorry
                            qed
                          next
                            case case_2
                            by sorry
                          next
                            case case_3
                            by sorry
                          qed
                        next
                          case InitTagSession_case_2
                          by sorry
                        qed
                      next
                        case R_test1
                        by sorry
                      next
                        case R_test1_resync
                        by sorry
                      qed
                    next
                      case c_h
                      by sorry
                    qed
                  qed
                next
                  case case_2
                  by sorry
                qed
              qed
            next
              case c_h
              by sorry
            qed
          qed
        next
          case case_2
          by sorry
        qed
      next
        case InitTagSession_case_2
        by sorry
      qed
    qed
  qed
qed

lemma ifHashKnownThenKeyKnown [reuse, use_induction]:
  all-traces
  "∀ k #i.
    (!KU( hkey(k) ) @ #i) ⇒ (∃ #j. (!KU( k ) @ #j) ∧ (#j < #i))"
/*
guarded formula characterizing all counter-examples:
"∃ k #i.
  (!KU( hkey(k) ) @ #i) ∧ ∀ #j. (!KU( k ) @ #j) ⇒ ¬(#j < #i)"
*/
induction
  case empty_trace
  by contradiction /* from formulas */
next
  case non_empty_trace
  simplify
  solve( (last(#i))  ∥
         (∃ #j. (!KU( k ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i)) )
    case case_1
    solve( !KU( hkey(k) ) @ #i )
      case c_hkey
      by contradiction /* from formulas */
    qed
  next
    case case_2
    by contradiction /* from formulas */
  qed
qed

lemma initStateDB [reuse, use_induction]:
  all-traces
  "∀ k #i.
    (StateDB( hkey(k) ) @ #i) ⇒
    ((Fresh( k ) @ #i) ∨ (∃ k0 #j. (Fresh( k0 ) @ #j) ∧ (#j < #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ k #i.
  (StateDB( hkey(k) ) @ #i)
 ∧
  (¬(Fresh( k ) @ #i)) ∧ (∀ k0 #j. (Fresh( k0 ) @ #j) ⇒ ¬(#j < #i))"
*/
induction
  case empty_trace
  by contradiction /* from formulas */
next
  case non_empty_trace
  simplify
  solve( (last(#i))  ∥ (Fresh( k ) @ #i)  ∥
         (∃ k0 #j. (Fresh( k0 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i)) )
    case case_1
    solve( StateDB( hkey(k) ) @ #i )
      case InitTagId
      by contradiction /* from formulas */
    next
      case R_test1
      solve( Reader2( ~sidR, m1, <xnT, h(m1, xnT, k)> ) ▶₁ #i )
        case R_in1
        solve( !KU( h(~nR, xnT, k) ) @ #vk.2 )
          case T_out1
          solve( DB( kR0, k ) ▶₀ #i )
            case InitTagId
            by contradiction /* from formulas */
          next
            case R_test1
            by contradiction /* from formulas */
          next
            case R_test1_resync
            by contradiction /* from formulas */
          qed
        next
          case c_h
          solve( DB( kR0, k ) ▶₀ #i )
            case InitTagId
            by contradiction /* from formulas */
          next
            case R_test1
            by contradiction /* from formulas */
          next
            case R_test1_resync
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case R_test1_resync
      solve( Reader2( ~sidR, m1, <xnT, h(m1, xnT, kR0)> ) ▶₁ #i )
        case R_in1
        solve( !KU( h(~nR, xnT, kR0) ) @ #vk.2 )
          case T_out1
          solve( DB( kR0, k ) ▶₀ #i )
            case InitTagId
            by contradiction /* from formulas */
          next
            case R_test1
            by contradiction /* from formulas */
          next
            case R_test1_resync
            by contradiction /* from formulas */
          qed
        next
          case c_h
          solve( DB( kR0, k ) ▶₀ #i )
            case InitTagId
            by contradiction /* from formulas */
          next
            case R_test1
            by contradiction /* from formulas */
          next
            case R_test1_resync
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case case_2
    by contradiction /* from formulas */
  next
    case case_3
    by contradiction /* from formulas */
  qed
qed

lemma initStateTag [reuse, use_induction]:
  all-traces
  "∀ k #i.
    (StateT( hkey(k) ) @ #i) ⇒
    (∃ k0 #j. (Fresh( k0 ) @ #j) ∧ (#j < #i))"
/*
guarded formula characterizing all counter-examples:
"∃ k #i.
  (StateT( hkey(k) ) @ #i)
 ∧
  ∀ k0 #j. (Fresh( k0 ) @ #j) ⇒ ¬(#j < #i)"
*/
induction
  case empty_trace
  by contradiction /* from formulas */
next
  case non_empty_trace
  simplify
  solve( (last(#i))  ∥
         (∃ k0 #j. (Fresh( k0 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i)) )
    case case_1
    solve( StateT( hkey(k) ) @ #i )
      case InitTagSession
      solve( !TagSession( idT, hkey(k) ) ▶₀ #i )
        case InitTagId
        by contradiction /* from formulas */
      next
        case T_test_then
        by contradiction /* from formulas */
      qed
    next
      case T_test_then
      solve( Tag3( ~sidT, idT, k, ~nT, x1, m2, h(h(x1, ~nT, k), k, x1)
             ) ▶₀ #i )
        case T_in2
        solve( !KU( h(h(x1, ~nT, k), k, x1) ) @ #vk )
          case R_out2_case_1
          by contradiction /* from formulas */
        next
          case R_out2_case_2
          by contradiction /* from formulas */
        next
          case T_out1
          by solve( Tag( ~sidT, idT, ~nT ) ▶₀ #vr.2 )
        next
          case c_h
          solve( Tag( ~sidT, idT, k ) ▶₀ #vr.2 )
            case InitTagSession_case_1
            by contradiction /* from formulas */
          next
            case InitTagSession_case_2
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case case_2
    by contradiction /* from formulas */
  qed
qed

lemma lookupImpliesInsert [reuse, use_induction]:
  all-traces
  "∀ kR0 kR #i.
    (NoUpdateDB( kR0, kR ) @ #i) ⇒
    (∃ #j. (InsertDB( kR0, kR ) @ #j) ∧ (#j < #i))"
/*
guarded formula characterizing all counter-examples:
"∃ kR0 kR #i.
  (NoUpdateDB( kR0, kR ) @ #i)
 ∧
  ∀ #j. (InsertDB( kR0, kR ) @ #j) ⇒ ¬(#j < #i)"
*/
induction
  case empty_trace
  by contradiction /* from formulas */
next
  case non_empty_trace
  simplify
  solve( (last(#i))  ∥
         (∃ #j. (InsertDB( kR0, kR ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i)) )
    case case_1
    solve( Reader2( ~sidR, m1, <xnT, h(m1, xnT, kR0)> ) ▶₁ #i )
      case R_in1
      solve( !KU( h(~nR, xnT, kR0) ) @ #vk.2 )
        case T_out1
        solve( DB( kR0, kR ) ▶₀ #i )
          case InitTagId
          by contradiction /* from formulas */
        next
          case R_test1
          by contradiction /* from formulas */
        next
          case R_test1_resync
          by contradiction /* from formulas */
        qed
      next
        case c_h
        solve( DB( kR0, kR ) ▶₀ #i )
          case InitTagId
          by contradiction /* from formulas */
        next
          case R_test1
          by contradiction /* from formulas */
        next
          case R_test1_resync
          by contradiction /* from formulas */
        qed
      qed
    qed
  next
    case case_2
    by contradiction /* from formulas */
  qed
qed

lemma secrecyDB1 [reuse, use_induction]:
  all-traces
  "¬(∃ kR0 kR #i1 #i2.
      (InsertDB( kR0, kR ) @ #i1) ∧ (!KU( kR0 ) @ #i2))"
/*
guarded formula characterizing all counter-examples:
"∃ kR0 kR #i1 #i2.
  (InsertDB( kR0, kR ) @ #i1) ∧ (!KU( kR0 ) @ #i2)"
*/
induction
  case empty_trace
  by contradiction /* from formulas */
next
  case non_empty_trace
  simplify
  solve( (last(#i2))  ∥ (last(#i1)) )
    case case_1
    solve( InsertDB( kR0, kR ) @ #i1 )
      case InitTagId
      by solve( !KU( ~k ) @ #i2 )
    next
      case R_test1
      solve( Reader2( ~sidR, m1, <xnT, h(m1, xnT, kR0.1)> ) ▶₁ #i1 )
        case R_in1
        solve( !KU( h(~nR, xnT, kR0.1) ) @ #vk.2 )
          case T_out1
          solve( !KU( ~nR ) @ #vk.3 )
            case R_out1
            solve( !KU( ~nT ) @ #vk.3 )
              case T_out1
              solve( DB( kR0, kR0.1 ) ▶₀ #i1 )
                case InitTagId
                by contradiction /* from formulas */
              next
                case R_test1
                by contradiction /* from formulas */
              next
                case R_test1_resync
                solve( InsertDB( kR0, kR0.1 ) @ #j.2 )
                  case InitTagId
                  by contradiction /* from formulas */
                next
                  case R_test1
                  by contradiction /* from formulas */
                qed
              qed
            qed
          qed
        next
          case c_h
          by contradiction /* node #i1 after last node #i2 */
        qed
      qed
    qed
  next
    case case_2
    solve( InsertDB( kR0, kR ) @ #i1 )
      case InitTagId
      by solve( !KU( ~k ) @ #i2 )
    next
      case R_test1
      solve( Reader2( ~sidR, m1, <xnT, h(m1, xnT, kR0.1)> ) ▶₁ #i1 )
        case R_in1
        solve( !KU( h(~nR, xnT, kR0.1) ) @ #vk.2 )
          case T_out1
          solve( !KU( ~nR ) @ #vk.3 )
            case R_out1
            solve( !KU( ~nT ) @ #vk.3 )
              case T_out1
              solve( DB( kR0, kR0.1 ) ▶₀ #i1 )
                case InitTagId
                by contradiction /* from formulas */
              next
                case R_test1
                by contradiction /* from formulas */
              next
                case R_test1_resync
                solve( InsertDB( kR0, kR0.1 ) @ #j.2 )
                  case InitTagId
                  by contradiction /* from formulas */
                next
                  case R_test1
                  by contradiction /* from formulas */
                qed
              qed
            qed
          qed
        next
          case c_h
          solve( !KU( ~nR ) @ #vk.3 )
            case R_out1
            solve( DB( kR0, kR0.1 ) ▶₀ #i1 )
              case InitTagId
              by contradiction /* from formulas */
            next
              case R_test1
              by contradiction /* from formulas */
            next
              case R_test1_resync
              solve( InsertDB( kR0, kR0.1 ) @ #j.2 )
                case InitTagId
                by contradiction /* from formulas */
              next
                case R_test1
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma secrecyDB2 [reuse, use_induction]:
  all-traces
  "¬(∃ kR0 kR #i1 #i2.
      (InsertDB( kR0, kR ) @ #i1) ∧ (!KU( kR ) @ #i2))"
/*
guarded formula characterizing all counter-examples:
"∃ kR0 kR #i1 #i2. (InsertDB( kR0, kR ) @ #i1) ∧ (!KU( kR ) @ #i2)"
*/
induction
  case empty_trace
  by contradiction /* from formulas */
next
  case non_empty_trace
  simplify
  solve( (last(#i2))  ∥ (last(#i1)) )
    case case_1
    solve( InsertDB( kR0, kR ) @ #i1 )
      case InitTagId
      by contradiction /* from formulas */
    next
      case R_test1
      by contradiction /* from formulas */
    qed
  next
    case case_2
    solve( InsertDB( kR0, kR ) @ #i1 )
      case InitTagId
      by contradiction /* from formulas */
    next
      case R_test1
      by contradiction /* from formulas */
    qed
  qed
qed

lemma secrecyIdentityTag [reuse, use_induction]:
  all-traces
  "¬(∃ sidT idT kT #i1 #i2.
      (NewTagSession( sidT, idT, kT ) @ #i1) ∧ (!KU( kT ) @ #i2))"
/*
guarded formula characterizing all counter-examples:
"∃ sidT idT kT #i1 #i2.
  (NewTagSession( sidT, idT, kT ) @ #i1) ∧ (!KU( kT ) @ #i2)"
*/
induction
  case empty_trace
  by contradiction /* from formulas */
next
  case non_empty_trace
  simplify
  solve( (last(#i2))  ∥ (last(#i1)) )
    case case_1
    solve( !TagSession( idT, kT ) ▶₀ #i1 )
      case InitTagId
      by contradiction /* from formulas */
    next
      case T_test_then
      solve( !KU( hkey(kT) ) @ #i2 )
        case c_hkey
        solve( !KU( h(h(x1, ~nT, kT), kT, x1) ) @ #vk )
          case R_out2_case_1
          by contradiction /* from formulas */
        next
          case R_out2_case_2
          by contradiction /* from formulas */
        next
          case T_out1
          solve( !KU( ~nT ) @ #j.2 )
            case T_out1
            solve( !KU( h(x1, ~nT.1, ~nT) ) @ #vk.2 )
              case T_out1
              by solve( Tag( ~sidT.1, idT, ~nT ) ▶₀ #vr.3 )
            next
              case c_h
              by contradiction /* cyclic */
            qed
          qed
        next
          case c_h
          solve( !KU( h(x1, ~nT, kT) ) @ #vk.2 )
            case R_out2_case_1
            solve( !KU( ~nR ) @ #j.3 )
              case R_out1
              solve( !KU( h(~nR, xnT, ~nT) ) @ #vk.2 )
                case T_out1
                solve( !KU( ~nT ) @ #vk.4 )
                  case T_out1
                  by solve( Tag( ~sidT.1, idT, ~nR ) ▶₀ #vr.3 )
                qed
              next
                case c_h
                by contradiction /* from formulas */
              qed
            qed
          next
            case R_out2_case_2
            solve( InsertDB( ~nT, kR ) @ #j.4 )
              case R_test1
              solve( Reader2( ~sidR, m1, <xnT.1, h(m1, xnT.1, ~nT)> ) ▶₁ #j.3 )
                case R_in1
                solve( !KU( ~nR ) @ #j.5 )
                  case R_out1
                  solve( !KU( h(~nR, xnT, ~nT) ) @ #vk.2 )
                    case T_out1
                    solve( !KU( ~nT ) @ #vk.4 )
                      case T_out1
                      solve( !KU( h(~nR.1, xnT, ~nT.1) ) @ #vk.7 )
                        case T_out1
                        solve( !KU( ~nR.1 ) @ #vk.8 )
                          case R_out1
                          solve( !KU( ~nT.2 ) @ #vk.8 )
                            case T_out1
                            by solve( Tag( ~sidT.1, idT, ~nR ) ▶₀ #vr.3 )
                          qed
                        qed
                      next
                        case c_h
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case c_h
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          next
            case T_out1
            solve( Tag( ~sidT.1, idT, kT ) ▶₀ #vr.3 )
              case InitTagSession_case_1
              by contradiction /* from formulas */
            next
              case InitTagSession_case_2
              by contradiction /* from formulas */
            qed
          next
            case c_h
            solve( !KU( ~nT ) @ #vk.3 )
              case T_out1
              solve( Tag( ~sidT.1, idT, kT ) ▶₀ #vr.3 )
                case InitTagSession_case_1
                by contradiction /* from formulas */
              next
                case InitTagSession_case_2
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      qed
    qed
  next
    case case_2
    solve( !TagSession( idT, kT ) ▶₀ #i1 )
      case InitTagId
      by contradiction /* from formulas */
    next
      case T_test_then
      solve( !KU( hkey(kT) ) @ #i2 )
        case c_hkey
        solve( !KU( h(h(x1, ~nT, kT), kT, x1) ) @ #vk )
          case R_out2_case_1
          by contradiction /* from formulas */
        next
          case R_out2_case_2
          by contradiction /* from formulas */
        next
          case T_out1
          solve( !KU( ~nT ) @ #j.2 )
            case T_out1
            solve( !KU( h(x1, ~nT.1, ~nT) ) @ #vk.2 )
              case T_out1
              by solve( Tag( ~sidT.1, idT, ~nT ) ▶₀ #vr.3 )
            next
              case c_h
              by contradiction /* cyclic */
            qed
          qed
        next
          case c_h
          solve( !KU( h(x1, ~nT, kT) ) @ #vk.2 )
            case R_out2_case_1
            solve( !KU( ~nR ) @ #j.3 )
              case R_out1
              solve( !KU( h(~nR, xnT, ~nT) ) @ #vk.2 )
                case T_out1
                solve( !KU( ~nT ) @ #vk.4 )
                  case T_out1
                  by solve( Tag( ~sidT.1, idT, ~nR ) ▶₀ #vr.3 )
                qed
              next
                case c_h
                by contradiction /* from formulas */
              qed
            qed
          next
            case R_out2_case_2
            solve( InsertDB( ~nT, kR ) @ #j.4 )
              case R_test1
              solve( Reader2( ~sidR, m1, <xnT.1, h(m1, xnT.1, ~nT)> ) ▶₁ #j.3 )
                case R_in1
                solve( !KU( ~nR ) @ #j.5 )
                  case R_out1
                  solve( !KU( h(~nR, xnT, ~nT) ) @ #vk.2 )
                    case T_out1
                    solve( !KU( ~nT ) @ #vk.4 )
                      case T_out1
                      solve( !KU( h(~nR.1, xnT, ~nT.1) ) @ #vk.7 )
                        case T_out1
                        solve( !KU( ~nR.1 ) @ #vk.8 )
                          case R_out1
                          solve( !KU( ~nT.2 ) @ #vk.8 )
                            case T_out1
                            by solve( Tag( ~sidT.1, idT, ~nR ) ▶₀ #vr.3 )
                          qed
                        qed
                      next
                        case c_h
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case c_h
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          next
            case T_out1
            solve( Tag( ~sidT.1, idT, kT ) ▶₀ #vr.3 )
              case InitTagSession_case_1
              by contradiction /* from formulas */
            next
              case InitTagSession_case_2
              by contradiction /* from formulas */
            qed
          next
            case c_h
            solve( !KU( ~nT ) @ #vk.3 )
              case T_out1
              solve( Tag( ~sidT.1, idT, kT ) ▶₀ #vr.3 )
                case InitTagSession_case_1
                by contradiction /* from formulas */
              next
                case InitTagSession_case_2
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma WA_Tag [use_induction]:
  all-traces
  "∀ sidT #i7.
    (TestT( sidT ) @ #i7) ⇒
    (∃ kT nT sidR m1 m2 m3 #i1 #i2 #i3 #i4 #i5 #i6.
      (((((((((((InT2( sidT, kT, nT, m1, m2, m3 ) @ #i6) ∧
                (OutR2( sidR, m1, m2, m3 ) @ #i5)) ∧
               (InR1( sidR, m1, m2 ) @ #i4)) ∧
              (OutT1( sidT, kT, nT, m1, m2 ) @ #i3)) ∧
             (InT1( sidT, kT, m1 ) @ #i2)) ∧
            (OutR1( sidR, m1 ) @ #i1)) ∧
           (#i1 < #i2)) ∧
          (#i2 < #i3)) ∧
         (#i3 < #i4)) ∧
        (#i4 < #i5)) ∧
       (#i5 < #i6)) ∧
      (#i6 < #i7))"
/*
guarded formula characterizing all counter-examples:
"∃ sidT #i7.
  (TestT( sidT ) @ #i7)
 ∧
  ∀ kT nT sidR m1 m2 m3 #i1 #i2 #i3 #i4 #i5 #i6.
   (InT2( sidT, kT, nT, m1, m2, m3 ) @ #i6) ∧
   (OutR2( sidR, m1, m2, m3 ) @ #i5) ∧
   (InR1( sidR, m1, m2 ) @ #i4) ∧
   (OutT1( sidT, kT, nT, m1, m2 ) @ #i3) ∧
   (InT1( sidT, kT, m1 ) @ #i2) ∧
   (OutR1( sidR, m1 ) @ #i1)
  ⇒
   ((¬(#i1 < #i2)) ∨
    (¬(#i2 < #i3)) ∨
    (¬(#i3 < #i4)) ∨
    (¬(#i4 < #i5)) ∨
    (¬(#i5 < #i6)) ∨
    (¬(#i6 < #i7)))"
*/
induction
  case empty_trace
  by contradiction /* from formulas */
next
  case non_empty_trace
  simplify
  solve( (last(#i7))  ∥
         (∃ kT nT sidR m1 m2 m3 #i1 #i2 #i3 #i4 #i5 #i6.
           (InT2( ~sidT, kT, nT, m1, m2, m3 ) @ #i6) ∧
           (OutR2( sidR, m1, m2, m3 ) @ #i5) ∧
           (InR1( sidR, m1, m2 ) @ #i4) ∧
           (OutT1( ~sidT, kT, nT, m1, m2 ) @ #i3) ∧
           (InT1( ~sidT, kT, m1 ) @ #i2) ∧
           (OutR1( sidR, m1 ) @ #i1)
          ∧
           (¬(last(#i6))) ∧
           (¬(last(#i5))) ∧
           (¬(last(#i4))) ∧
           (¬(last(#i3))) ∧
           (¬(last(#i2))) ∧
           (¬(last(#i1))) ∧
           (#i1 < #i2) ∧
           (#i2 < #i3) ∧
           (#i3 < #i4) ∧
           (#i4 < #i5) ∧
           (#i5 < #i6) ∧
           (#i6 < #i7)) )
    case case_1
    solve( Tag3( ~sidT, idT, kT, ~nT, x1, m2, h(h(x1, ~nT, kT), kT, x1)
           ) ▶₀ #i7 )
      case T_in2
      solve( !KU( h(h(x1, ~nT, kT), kT, x1) ) @ #vk )
        case R_out2_case_1
        solve( (¬(#vr.6 < #vr.2))  ∥ (¬(#vr.1 < #vr.5)) )
          case case_1
          solve( !KU( ~nR ) @ #vk.1 )
            case R_out1
            by contradiction /* cyclic */
          qed
        next
          case case_2
          solve( !KU( ~nT ) @ #vk.3 )
            case T_out1
            by contradiction /* cyclic */
          qed
        qed
      next
        case R_out2_case_2
        solve( (¬(#vr.6 < #vr.2))  ∥ (¬(#vr.1 < #vr.5)) )
          case case_1
          solve( InsertDB( kT, kR ) @ #j.2 )
            case InitTagId
            solve( !KU( ~nR ) @ #vk.1 )
              case R_out1
              by contradiction /* cyclic */
            qed
          next
            case R_test1
            solve( Reader2( ~sidR, m1, <xnT, h(m1, xnT, kT)> ) ▶₁ #j.2 )
              case R_in1
              solve( !KU( ~nR ) @ #vk.1 )
                case R_out1
                by contradiction /* cyclic */
              qed
            qed
          qed
        next
          case case_2
          solve( InsertDB( kT, kR ) @ #j.2 )
            case InitTagId
            solve( !KU( ~nT ) @ #vk.3 )
              case T_out1
              by contradiction /* cyclic */
            qed
          next
            case R_test1
            solve( Reader2( ~sidR, m1, <xnT, h(m1, xnT, kT)> ) ▶₁ #j.2 )
              case R_in1
              solve( !KU( ~nT ) @ #vk.3 )
                case T_out1
                by contradiction /* cyclic */
              qed
            qed
          qed
        qed
      next
        case T_out1
        by solve( Tag( ~sidT, idT, ~nT ) ▶₀ #vr.2 )
      next
        case c_h
        solve( Tag( ~sidT, idT, kT ) ▶₀ #vr.2 )
          case InitTagSession_case_1
          by contradiction /* from formulas */
        next
          case InitTagSession_case_2
          by contradiction /* from formulas */
        qed
      qed
    qed
  next
    case case_2
    by contradiction /* from formulas */
  qed
qed

lemma WA_Reader [use_induction]:
  all-traces
  "∀ sidR #i5.
    (TestR( sidR ) @ #i5) ⇒
    (∃ sidT kT nT m1 m2 #i1 #i2 #i3 #i4.
      (((((((InR1( sidR, m1, m2 ) @ #i4) ∧
            (OutT1( sidT, kT, nT, m1, m2 ) @ #i3)) ∧
           (InT1( sidT, kT, m1 ) @ #i2)) ∧
          (OutR1( sidR, m1 ) @ #i1)) ∧
         (#i1 < #i2)) ∧
        (#i2 < #i3)) ∧
       (#i3 < #i4)) ∧
      (#i4 < #i5))"
/*
guarded formula characterizing all counter-examples:
"∃ sidR #i5.
  (TestR( sidR ) @ #i5)
 ∧
  ∀ sidT kT nT m1 m2 #i1 #i2 #i3 #i4.
   (InR1( sidR, m1, m2 ) @ #i4) ∧
   (OutT1( sidT, kT, nT, m1, m2 ) @ #i3) ∧
   (InT1( sidT, kT, m1 ) @ #i2) ∧
   (OutR1( sidR, m1 ) @ #i1)
  ⇒
   ((¬(#i1 < #i2)) ∨
    (¬(#i2 < #i3)) ∨
    (¬(#i3 < #i4)) ∨
    (¬(#i4 < #i5)))"
*/
induction
  case empty_trace
  by contradiction /* from formulas */
next
  case non_empty_trace
  simplify
  solve( (last(#i5))  ∥
         (∃ sidT kT nT m1 m2 #i1 #i2 #i3 #i4.
           (InR1( ~sidR, m1, m2 ) @ #i4) ∧
           (OutT1( sidT, kT, nT, m1, m2 ) @ #i3) ∧
           (InT1( sidT, kT, m1 ) @ #i2) ∧
           (OutR1( ~sidR, m1 ) @ #i1)
          ∧
           (¬(last(#i4))) ∧
           (¬(last(#i3))) ∧
           (¬(last(#i2))) ∧
           (¬(last(#i1))) ∧
           (#i1 < #i2) ∧
           (#i2 < #i3) ∧
           (#i3 < #i4) ∧
           (#i4 < #i5)) )
    case case_1
    solve( Reader2( ~sidR, m1, <xnT, h(m1, xnT, kR0)> ) ▶₁ #i5 )
      case R_in1
      solve( InsertDB( kR0, kR ) @ #j.1 )
        case InitTagId
        solve( !KU( h(~nR, xnT, ~k) ) @ #vk.2 )
          case T_out1
          solve( !KU( ~nR ) @ #vk.3 )
            case R_out1
            by contradiction /* cyclic */
          qed
        next
          case c_h
          by contradiction /* from formulas */
        qed
      next
        case R_test1
        solve( Reader2( ~sidR.1, m1, <xnT.1, h(m1, xnT.1, kR0)> ) ▶₁ #j.1 )
          case R_in1
          solve( !KU( h(~nR, xnT, kR0) ) @ #vk.2 )
            case T_out1
            solve( !KU( ~nR ) @ #vk.6 )
              case R_out1
              by contradiction /* cyclic */
            qed
          next
            case c_h
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case case_2
    by contradiction /* from formulas */
  qed
qed

/* All well-formedness checks were successful. */

end